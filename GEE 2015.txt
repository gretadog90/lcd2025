*/

// Code revised Sept 12, 2024

/////////////////////////////////////////////////////////////////////
/////// Import assets ///////
/////////////////////////////////////////////////////////////////////
//Import 1042 LCD cities
var cities = ee.FeatureCollection('users/gretam/LCD_cities');
//Selecting one city for testing/mapping
var dc = cities
    .filter(ee.Filter.equals('city', 'Washington D.C.'));

//Import Lancet 30m NDVI data 
var ndvi=ee.ImageCollection('LANDSAT/LC08/C02/T1');
//Import 30m global surface water
var jrc = ee.Image('JRC/GSW1_4/YearlyHistory/2015');
//Import 500m landcover data
var landcover = ee.Image('MODIS/061/MCD12Q1/2015_01_01');

// Import 2015 Population data (# of residents per pixel, 1km)
var pop2015 = ee.Image('CIESIN/GPWv411/GPW_Population_Count/gpw_v4_population_count_rev11_2015_30_sec');
// Import 2015 Population data (# of residents per pixel, 100m)
var pop2015_100m = ee.Image('JRC/GHSL/P2023A/GHS_POP/2015');

////////////////////////////////////////////////////////////////////////
// Create a water mask
///////////////////////////////////////////////////////////////////////
// Will use to mask NDVI image where there is water so that city average
// ignores water. In this dataset, 'waterClass' takes values of:
//0=unknown, 1=not water, 2= seasonal water and 3= permanent water.
// Most pixels are masked (land)

//First, unmask all the uncategorized (land) pixels in this data set
// Chose 5, but could be any number that is not currently used
var water =jrc.select('waterClass').unmask(5);

// define water mask. This sets waterClass=3 to 0 and all other values to 1
var mask=water.neq(3);

/////////////////////////////////////////////////////////////////////
/// Seasonal NDVI 
/////////////////////////////////////////////////////////////////////

// WINTER 2015
//filter to correct date range
var winter = ndvi.filterDate('2014-12-01', '2015-02-28');

//use simple composite algorithm to minimize clouds, calculate NDVI from red (B4)
//and nir (B5) bands, rename as NDVI and select only NDVI band
var NDVI_winter = ee.Algorithms.Landsat.simpleComposite(winter)
          .normalizedDifference(['B5', 'B4'])
          .rename('NDVI')
          .select('NDVI');

// override NDVI to be missing where GSW map indicates water
var NDVI_winter = NDVI_winter.mask(mask);

// map to make sure mask is working correctly. water should be missing, 
// urban area should be white or very light blue or very light green and 
// vegetation should be a darker green 
Map.centerObject(dc);
var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(NDVI_winter, ndviParams, 'NDVI image');

//Calculate mean per city
var winter_cities = NDVI_winter.reduceRegions({
  collection: cities, 
  reducer: ee.Reducer.mean(),
  scale: 30
});

//export table to drive
Export.table.toDrive({
  collection: winter_cities,
  folder: 'Lancet2025',
  description: '2015_winter',
  fileFormat: 'CSV'
});
 
////Spring 2015
//filter to correct date range
var spring = ndvi.filterDate('2015-03-01', '2015-05-31');

//use simple composite algorithm to minimize clouds, calculate NDVI from red (B4)
//and nir (B5) bands, rename as NDVI and select only NDVI band
var NDVI_spring = ee.Algorithms.Landsat.simpleComposite(spring)
          .normalizedDifference(['B5', 'B4'])
          .rename('NDVI')
          .select('NDVI');

// override NDVI to be missing where GSW map indicates water
var NDVI_spring = NDVI_spring.mask(mask);

//Calculate mean per city
var spring_cities = NDVI_spring.reduceRegions({
  collection: cities, 
  reducer: ee.Reducer.mean(),
  scale: 30
});

//export table to drive
Export.table.toDrive({
  collection: spring_cities,
  description: '2015_spring',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});
 
////Summer 2015
//filter to correct date range
var summer = ndvi.filterDate('2015-06-01', '2015-08-31');

//use simple composite algorithm to minimize clouds, calculate NDVI from red (B4)
//and nir (B5) bands, rename as NDVI and select only NDVI band
var NDVI_summer = ee.Algorithms.Landsat.simpleComposite(summer)
          .normalizedDifference(['B5', 'B4'])
          .rename('NDVI')
          .select('NDVI');

// override NDVI to be missing where GSW map indicates water
var NDVI_summer = NDVI_summer.mask(mask);

//Calculate mean per city
var summer_cities = NDVI_summer.reduceRegions({
  collection: cities, 
  reducer: ee.Reducer.mean(),
  scale: 30
});

//export table to drive
Export.table.toDrive({
  collection: summer_cities,
  description: '2015_summer',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});
 
////Fall 2015
//filter to correct date range
var fall = ndvi.filterDate('2015-09-01', '2015-11-30');

//use simple composite algorithm to minimize clouds, calculate NDVI from red (B4)
//and nir (B5) bands, rename as NDVI and select only NDVI band
var NDVI_fall = ee.Algorithms.Landsat.simpleComposite(fall)
          .normalizedDifference(['B5', 'B4'])
          .rename('NDVI')
          .select('NDVI');

// override NDVI to be missing where GSW map indicates water
var NDVI_fall = NDVI_fall.mask(mask);

//Calculate mean per city
var fall_cities = NDVI_fall.reduceRegions({
  collection: cities, 
  reducer: ee.Reducer.mean(),
  scale: 30
});

//export table to drive
Export.table.toDrive({
  collection: fall_cities,
  folder: 'Lancet2025',
  description: '2015_fall',
  fileFormat: 'CSV'
});
 
// Cumulative averages computed in R by averaging seasonal values
// Peak greenness computed in R by extracting max from seasonal data

////////////////////////////////////////
/// Seasonal population-weighted NDVI (1km)
///////////////////////////////////////
var pop_vis = {
  "max": 1000.0,
  "palette": ["ffffe7", "FFc869", "ffac1d", "e17735", "f2552c", "9f0c21"],
  "min": 200.0
};
Map.addLayer(pop2015, pop_vis, 'population_count');

///////////////WINTER//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_winter = pop2015.multiply(NDVI_winter); 

// Sum over all pixels within one city 
var winter_numerator = ndvi_pop_winter.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 1000,
});

// Export Sum1
Export.table.toDrive({
  collection: winter_numerator,
  description: '2015_winter_num',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////SPRING//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_spring = pop2015.multiply(NDVI_spring); 

// Sum over all pixels within one city 
var spring_numerator = ndvi_pop_spring.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 1000,
});

// Export Sum1
Export.table.toDrive({
  collection: spring_numerator,
  description: '2015_spring_num',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////SUMMER//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_summer = pop2015.multiply(NDVI_summer); 

// Sum over all pixels within one city 
var summer_numerator = ndvi_pop_summer.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 1000,
});

// Export Sum1
Export.table.toDrive({
  collection: summer_numerator,
  description: '2015_summer_num',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////FALL//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_fall = pop2015.multiply(NDVI_fall); 

// Sum over all pixels within one city 
var fall_numerator = ndvi_pop_fall.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 1000,
});

// Export Sum1
Export.table.toDrive({
  collection: fall_numerator,
  description: '2015_fall_num',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

//////////////////////////////////////
// Denominator: Sum of population size
//////////////////////////////////////
var pop_denominator = pop2015.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 1000,
});

// Export total population
Export.table.toDrive({
  collection: pop_denominator,
  description: '2015_pop_denom',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

/////////////////////////////////////////////
/// Seasonal population-weighted NDVI (100m)
/////////////////////////////////////////////
var pop_vis_100m = {
  min: 0.0,
  max: 100.0,
  palette:
      ['000004', '320A5A', '781B6C', 'BB3654', 'EC6824', 'FBB41A', 'FCFFA4']
};
Map.addLayer(pop2015_100m, pop_vis_100m, 'population_count');

///////////////WINTER//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_winter_100m = pop2015_100m.multiply(NDVI_winter); 

// Sum over all pixels within one city 
var winter_numerator_100m = ndvi_pop_winter_100m.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 100,
});

// Export Sum1
Export.table.toDrive({
  collection: winter_numerator_100m,
  description: '2015_winter_num_100m',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////SPRING//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_spring_100m = pop2015_100m.multiply(NDVI_spring); 

// Sum over all pixels within one city 
var spring_numerator_100m = ndvi_pop_spring_100m.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 100,
});

// Export Sum1
Export.table.toDrive({
  collection: spring_numerator_100m,
  description: '2015_spring_num_100m',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////SUMMER//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_summer_100m = pop2015_100m.multiply(NDVI_summer); 

// Sum over all pixels within one city 
var summer_numerator_100m = ndvi_pop_summer_100m.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 100,
});

// Export Sum1
Export.table.toDrive({
  collection: summer_numerator_100m,
  description: '2015_summer_num_100m',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////FALL//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_fall_100m = pop2015_100m.multiply(NDVI_fall); 

// Sum over all pixels within one city 
var fall_numerator_100m = ndvi_pop_fall_100m.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 100,
});

// Export Sum1
Export.table.toDrive({
  collection: fall_numerator_100m,
  description: '2015_fall_num_100m',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

//////////////////////////////////////
// Denominator: Sum of population size
//////////////////////////////////////
var pop_denominator_100m = pop2015_100m.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 100,
});

// Export total population
Export.table.toDrive({
  collection: pop_denominator_100m,
  description: '2015_pop_denom_100m',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

/////////////////////////////////////////////////
// Landcover maps-- green and green + blue area
/////////////////////////////////////////////////
// chose to use the UMD landcover classification system 'LC_Type2'
var umd_landcover=landcover.select('LC_Type2')

// Remap values for blue + green
var bluegreen = umd_landcover
      .where(umd_landcover.eq(0), 1) //water
      .where(umd_landcover.eq(11), 1) //Permanent Wetlands
      .where(umd_landcover.eq(13), 0) //Urban and Built-up Land
      .where(umd_landcover.eq(15), 0); //Non-Vegetated Lands

//make binary by turning all non zero values to 1. these represent:
//forests (1-5), shrublands (6-7), savannas (8-9), grasslands (10)
//wetlands (11), croplands (12, 14)
var gba = bluegreen.gt(0);

//make sure it looks right-- white should appear otherwise non gba is null not 0
Map.addLayer({
  visParams: {palette: ['white', 'blue']},
  eeObject: gba
});

var gba = gba.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.mean(),
  scale: 500,
});

// Export green + blue area
Export.table.toDrive({
  collection: gba,
  description: '2015_gba',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

// Just green
var green=umd_landcover
      .where(umd_landcover.eq(13), 0) //Urban and Built-up Land
      .where(umd_landcover.eq(11), 0) //Permanent Wetlands
      .where(umd_landcover.eq(15), 0); //Non-Vegetated Lands
var ga=green.gt(0);

//make sure it looks right-- white should appear otherwise non gba is null not 0
Map.addLayer({
  visParams: {palette: ['white', 'green']},
  eeObject: ga
});

var ga = ga.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.mean(),
  scale: 500,
});

// Export green area
Export.table.toDrive({
  collection: ga,
  description: '2015_ga',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});
