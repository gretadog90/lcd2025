/*

1. Calculate seasonal average NDVI 
2. Calculate seaonal pop-weighted NDVI (numerator of weighted average)
  a. 1km pop
  b. 100m pop

Note: landcover and population updated every 5 years so skipping denominator
and landcover metrics

Note: rest of data processing done in R due to issues in way GEE handled missing values
The filter dates for each season were determined by Jochem Klompmaker.

Sources:
ndvi: https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1
water: https://developers.google.com/earth-engine/datasets/catalog/JRC_GSW1_4_YearlyHistory
pop (1km): https://developers.google.com/earth-engine/datasets/catalog/CIESIN_GPWv411_GPW_Population_Count
pop (100m): https://developers.google.com/earth-engine/datasets/catalog/JRC_GHSL_P2023A_GHS_POP

*/

// Code revised Sept 12, 2024

/////////////////////////////////////////////////////////////////////
/////// Import assets ///////
/////////////////////////////////////////////////////////////////////
//Import 1042 LCD cities
var cities = ee.FeatureCollection('users/gretam/LCD_cities');
//Selecting one city for testing/mapping
var dc = cities
    .filter(ee.Filter.equals('city', 'Washington D.C.'));

//Import Lancet 30m NDVI data 
var ndvi=ee.ImageCollection('LANDSAT/LC08/C02/T1');
//Import 30m global surface water
var jrc = ee.Image('JRC/GSW1_4/YearlyHistory/2020');

// Import 2020 Population data (# of residents per pixel, 1km)
var pop2020 = ee.Image('CIESIN/GPWv411/GPW_Population_Count/gpw_v4_population_count_rev11_2020_30_sec');
// Import 2020 Population data (# of residents per pixel, 100m)
var pop2020_100m = ee.Image('JRC/GHSL/P2023A/GHS_POP/2020');

////////////////////////////////////////////////////////////////////////
// Create a water mask
///////////////////////////////////////////////////////////////////////
// Will use to mask NDVI image where there is water so that city average
// ignores water. In this dataset, 'waterClass' takes values of:
//0=unknown, 1=not water, 2= seasonal water and 3= permanent water.
// Most pixels are masked (land)

//First, unmask all the uncategorized (land) pixels in this data set
// Chose 5, but could be any number that is not currently used
var water =jrc.select('waterClass').unmask(5);

// define water mask. This sets waterClass=3 to 0 and all other values to 1
var mask=water.neq(3);

/////////////////////////////////////////////////////////////////////
/// Seasonal NDVI 
/////////////////////////////////////////////////////////////////////

// WINTER 2022
//filter to correct date range
var winter = ndvi.filterDate('2021-12-01', '2022-02-28');

//use simple composite algorithm to minimize clouds, calculate NDVI from red (B4)
//and nir (B5) bands, rename as NDVI and select only NDVI band
var NDVI_winter = ee.Algorithms.Landsat.simpleComposite(winter)
          .normalizedDifference(['B5', 'B4'])
          .rename('NDVI')
          .select('NDVI');

// override NDVI to be missing where GSW map indicates water
var NDVI_winter = NDVI_winter.mask(mask);

// map to make sure mask is working correctly
var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.centerObject(dc);
Map.addLayer(NDVI_winter, ndviParams, 'NDVI image');

//Calculate mean per city
var winter_cities = NDVI_winter.reduceRegions({
  collection: cities, 
  reducer: ee.Reducer.mean(),
  scale: 30
});

//export table to drive
Export.table.toDrive({
  collection: winter_cities,
  folder: 'Lancet2025',
  description: '2022_winter',
  fileFormat: 'CSV'
});
 
////Spring 2022
//filter to correct date range
var spring = ndvi.filterDate('2022-03-01', '2022-05-31');

//use simple composite algorithm to minimize clouds, calculate NDVI from red (B4)
//and nir (B5) bands, rename as NDVI and select only NDVI band
var NDVI_spring = ee.Algorithms.Landsat.simpleComposite(spring)
          .normalizedDifference(['B5', 'B4'])
          .rename('NDVI')
          .select('NDVI');

// override NDVI to be missing where GSW map indicates water
var NDVI_spring = NDVI_spring.mask(mask);

//Calculate mean per city
var spring_cities = NDVI_spring.reduceRegions({
  collection: cities, 
  reducer: ee.Reducer.mean(),
  scale: 30
});

//export table to drive
Export.table.toDrive({
  collection: spring_cities,
  description: '2022_spring',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});
 
////Summer 2022
//filter to correct date range
var summer = ndvi.filterDate('2022-06-01', '2022-08-31');

//use simple composite algorithm to minimize clouds, calculate NDVI from red (B4)
//and nir (B5) bands, rename as NDVI and select only NDVI band
var NDVI_summer = ee.Algorithms.Landsat.simpleComposite(summer)
          .normalizedDifference(['B5', 'B4'])
          .rename('NDVI')
          .select('NDVI');

// override NDVI to be missing where GSW map indicates water
var NDVI_summer = NDVI_summer.mask(mask);

//Calculate mean per city
var summer_cities = NDVI_summer.reduceRegions({
  collection: cities, 
  reducer: ee.Reducer.mean(),
  scale: 30
});

//export table to drive
Export.table.toDrive({
  collection: summer_cities,
  description: '2022_summer',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});
 
////Fall 2022
//filter to correct date range
var fall = ndvi.filterDate('2022-09-01', '2022-11-30');

//use simple composite algorithm to minimize clouds, calculate NDVI from red (B4)
//and nir (B5) bands, rename as NDVI and select only NDVI band
var NDVI_fall = ee.Algorithms.Landsat.simpleComposite(fall)
          .normalizedDifference(['B5', 'B4'])
          .rename('NDVI')
          .select('NDVI');

// override NDVI to be missing where GSW map indicates water
var NDVI_fall = NDVI_fall.mask(mask);

//Calculate mean per city
var fall_cities = NDVI_fall.reduceRegions({
  collection: cities, 
  reducer: ee.Reducer.mean(),
  scale: 30
});

//export table to drive
Export.table.toDrive({
  collection: fall_cities,
  folder: 'Lancet2025',
  description: '2022_fall',
  fileFormat: 'CSV'
});

// Cumulative averages computed in R by averaging seasonal values
// Peak greenness computed in R by extracting max from seasonal data

//////////////////////////////////////////////
/// Seasonal population-weighted NDVI (1km)
/////////////////////////////////////////////

///////////////WINTER//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_winter = pop2020.multiply(NDVI_winter); 

// Sum over all pixels within one city 
var winter_numerator = ndvi_pop_winter.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 1000,
});

// Export
Export.table.toDrive({
  collection: winter_numerator,
  description: '2022_winter_num',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////SPRING//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_spring = pop2020.multiply(NDVI_spring); 

// Sum over all pixels within one city 
var spring_numerator = ndvi_pop_spring.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 1000,
});

// Export 
Export.table.toDrive({
  collection: spring_numerator,
  description: '2022_spring_num',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////SUMMER//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_summer = pop2020.multiply(NDVI_summer); 

// Sum over all pixels within one city 
var summer_numerator = ndvi_pop_summer.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 1000,
});

// Export 
Export.table.toDrive({
  collection: summer_numerator,
  description: '2022_summer_num',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////FALL//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_fall = pop2020.multiply(NDVI_fall); 

// Sum over all pixels within one city 
var fall_numerator = ndvi_pop_fall.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 1000,
});

// Export 
Export.table.toDrive({
  collection: fall_numerator,
  folder: 'Lancet2025',
  description: '2022_fall_num',
  fileFormat: 'CSV'
});


/////////////////////////////////////////////
/// Seasonal population-weighted NDVI (100m)
/////////////////////////////////////////////

///////////////WINTER//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_winter_100m = pop2020_100m.multiply(NDVI_winter); 

// Sum over all pixels within one city 
var winter_numerator_100m = ndvi_pop_winter_100m.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 100,
});

// Export Sum1
Export.table.toDrive({
  collection: winter_numerator_100m,
  description: '2022_winter_num_100m',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////SPRING//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_spring_100m = pop2020_100m.multiply(NDVI_spring); 

// Sum over all pixels within one city 
var spring_numerator_100m = ndvi_pop_spring_100m.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 100,
});

// Export Sum1
Export.table.toDrive({
  collection: spring_numerator_100m,
  description: '2022_spring_num_100m',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////SUMMER//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_summer_100m = pop2020_100m.multiply(NDVI_summer); 

// Sum over all pixels within one city 
var summer_numerator_100m = ndvi_pop_summer_100m.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 100,
});

// Export Sum1
Export.table.toDrive({
  collection: summer_numerator_100m,
  description: '2022_summer_num_100m',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});

///////////////FALL//////////////////
// Multiply each NDVI value per the population size within the same pixel
var ndvi_pop_fall_100m = pop2020_100m.multiply(NDVI_fall); 

// Sum over all pixels within one city 
var fall_numerator_100m = ndvi_pop_fall_100m.reduceRegions({
  collection: cities,
  reducer: ee.Reducer.sum(),
  scale: 100,
});

// Export Sum1
Export.table.toDrive({
  collection: fall_numerator_100m,
  description: '2022_fall_num_100m',
  folder: 'Lancet2025',
  fileFormat: 'CSV'
});
